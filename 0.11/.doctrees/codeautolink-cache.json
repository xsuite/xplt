{
  "api": [],
  "autoapi/xplt/base/index": [
    {
      "source": ">>> print(type(loc))\n<type 'Locator'>\n>>> print(loc())\n[1, 2, 3, 4]",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 114
    },
    {
      "source": ".. plot::\n\n    lim = (1_000_000, 1_000_010)\n\n    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, gridspec_kw={'hspace': 2})\n    ax1.set(title='offset notation', xlim=lim)\n    ax2.set(title='scientific notation', xlim=lim)\n    ax2.xaxis.get_major_formatter().set_useOffset(False)\n    ax3.set(title='floating-point notation', xlim=lim)\n    ax3.xaxis.get_major_formatter().set_useOffset(False)\n    ax3.xaxis.get_major_formatter().set_scientific(False)\n\n",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ">>> print(type(loc))\n<type 'Locator'>\n>>> print(loc())\n[1, 2, 3, 4]",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 557
    },
    {
      "source": "x_isdata, y_isdata = trans.contains_branch_seperately(ax.transData)",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 650
    },
    {
      "source": ">>> print(type(loc))\n<type 'Locator'>\n>>> print(loc())\n[1, 2, 3, 4]",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 988
    },
    {
      "source": ">>> print(type(loc))\n<type 'Locator'>\n>>> print(loc())\n[1, 2, 3, 4]",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 1176
    },
    {
      "source": ">>> print(type(loc))\n<type 'Locator'>\n>>> print(loc())\n[1, 2, 3, 4]",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 1294
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/base/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.base",
          "Module Contents"
        ]
      },
      "doc_lineno": 1596
    }
  ],
  "autoapi/xplt/colors/index": [],
  "autoapi/xplt/hooks/index": [],
  "autoapi/xplt/index": [],
  "autoapi/xplt/line/index": [
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/line/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.line",
          "Module Contents"
        ]
      },
      "doc_lineno": 573
    }
  ],
  "autoapi/xplt/particles/index": [
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/particles/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.particles",
          "Module Contents"
        ]
      },
      "doc_lineno": 342
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/particles/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.particles",
          "Module Contents"
        ]
      },
      "doc_lineno": 831
    }
  ],
  "autoapi/xplt/phasespace/index": [],
  "autoapi/xplt/properties/index": [
    {
      "source": "def mask_callback(mask, get):\n    mask &= get(\"t\") < 1e-3  # all particles with time < 1 ms\n    return mask",
      "names": [],
      "example": {
        "document": "autoapi/xplt/properties/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.properties",
          "Module Contents"
        ]
      },
      "doc_lineno": 83
    }
  ],
  "autoapi/xplt/timestructure/index": [
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 370
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 845
    },
    {
      "source": "def mask_callback(mask, get):\n    mask &= get(\"t\") < 1e-3  # all particles with time < 1 ms\n    return mask",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 1026
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 1405
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 1911
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 2360
    },
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/timestructure/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.timestructure",
          "Module Contents"
        ]
      },
      "doc_lineno": 2767
    }
  ],
  "autoapi/xplt/twiss/index": [
    {
      "source": ">>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\")\n[[['a', 'b']], [['c'], ['d']], [['fun(e,2)']]]\n>>> XManifoldPlot.parse_nested_list_string(\"a+b, c-d,fun(e,2)\", strip_off_methods=True)\n([[['a', 'b']], [['c'], ['d']], [['e']]],\n [[[None, None]], [[None], [None]], [['fun(e,2)']]])",
      "names": [],
      "example": {
        "document": "autoapi/xplt/twiss/index",
        "ref_id": "module-contents",
        "headings": [
          "xplt.twiss",
          "Module Contents"
        ]
      },
      "doc_lineno": 275
    }
  ],
  "autoapi/xplt/util/index": [],
  "examples/animations": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport xtrack as xt\nimport xpart as xp\nimport xplt\nimport numpy as np\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import display, HTML\n\nxplt.apply_style()\n\nNode = xt.Node\n\nnp.random.seed(43543557)",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "animation"
          ],
          "code_str": "matplotlib.animation",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_from",
          "resolved_location": "matplotlib.animation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation"
          ],
          "code_str": "FuncAnimation",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        }
      ],
      "example": {
        "document": "examples/animations",
        "ref_id": "animations",
        "headings": [
          "Animations"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "## Generate a simple 6-fold symmetric FODO lattice\n\nn = 6  # number of sections\nelements = {\n    \"QF\": xt.Multipole(length=0.3, knl=[0, +0.63]),\n    \"QD\": xt.Multipole(length=0.3, knl=[0, -0.48]),\n    \"MU\": xt.Multipole(length=0.5, knl=[np.pi / n], hxl=[np.pi / n]),\n}\nparts = {\n    \"a\": [\n        xt.Node(0.7, \"QF\"),\n        xt.Node(1.4, \"MU\"),\n        xt.Node(2.1, \"QD\"),\n        xt.Node(2.8, \"MU\"),\n    ],\n    \"b\": [\n        xt.Node(2.2, \"MU\"),\n        xt.Node(2.9, \"QD\"),\n        xt.Node(3.6, \"MU\"),\n        xt.Node(4.3, \"QF\"),\n    ],\n}\nnodes = [xt.Node(5.0 * i, \"a\" if i % 2 else \"b\", name=f\"S{i+1}\") for i in range(n)]\n\n# sextupoles\nfor i in range(n):\n    sx = xt.Multipole(length=0.2, knl=[0, 0, 0.5 * np.sin(2 * np.pi * (i / n))])\n    nodes.append(xt.Node(0.2, sx, from_=f\"S{i+1}\", name=f\"S{i+1}SX\"))\n\nline = xt.Line.from_sequence(\n    nodes, length=5.0 * n, sequences=parts, elements=elements, auto_reorder=True\n)\nline.particle_ref = xp.Particles()\nline.build_tracker();",
      "names": [
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xpart",
            "Particles"
          ],
          "code_str": "xp.Particles",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "xtrack.particles.particles.Particles"
        }
      ],
      "example": {
        "document": "examples/animations",
        "ref_id": "animations",
        "headings": [
          "Animations"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "## Generate particles\nnparticles = int(1e3)\n\n# Transverse distribution (gaussian)\nnorm_emitt_x = 4e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_x)\nnorm_emitt_y = 1e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_y)\nx, px = xp.generate_2D_gaussian(nparticles)\ny, py = xp.generate_2D_gaussian(nparticles)\n\n# Longitudinal distribution (coasting beam)\nrel_momentum_spread = 1e-4  # relative momentum spread ( P/p0 - 1 )\nzeta = line.get_length() * np.random.uniform(-0.5, 0.5, nparticles)\ndelta = rel_momentum_spread * xp.generate_2D_gaussian(nparticles)[0]\n\nparticles = line.build_particles(\n    x_norm=x,\n    px_norm=px,\n    nemitt_x=norm_emitt_x,\n    y_norm=y,\n    py_norm=py,\n    nemitt_y=norm_emitt_y,\n    method=\"4d\",  # for twiss (default is 6d, won't work without a cavity)\n    zeta=zeta,\n    delta=delta,\n)",
      "names": [
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "uniform"
          ],
          "code_str": "np.random.uniform",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.uniform"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        }
      ],
      "example": {
        "document": "examples/animations",
        "ref_id": "animations",
        "headings": [
          "Animations"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "## Generate tracking data\nline.track(particles, num_turns=50, turn_by_turn_monitor=True)",
      "names": [],
      "example": {
        "document": "examples/animations",
        "ref_id": "animations",
        "headings": [
          "Animations"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "# use a faster backend\nxplt.mpl.rcParams[\"backend\"] = \"nbagg\"\n# increase buffer size\nxplt.mpl.rcParams[\"animation.embed_limit\"] = 100  # MB\n# use a faster style\nxplt.mpl.style.use(\"fast\")",
      "names": [],
      "example": {
        "document": "examples/animations",
        "ref_id": "animations",
        "headings": [
          "Animations"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(animated=True, std=True, mean=True)\nparticle_data = line.record_last_track\n\n\ndef animate(i):\n    turn = particle_data.at_turn[0, i]\n    plot.fig.suptitle(f\"Turn {turn}\")\n    return plot.update(\n        particle_data,\n        mask=(slice(None), i),  # select all particles and a single turn\n        autoscale=(i == 0),  # only on first frame, then freeze to avoid jitter\n    )\n\n\nanim = FuncAnimation(\n    plot.fig, animate, frames=range(0, 50, 3), interval=100, blit=True\n)\n\ndisplay(HTML(anim.to_jshtml()))\n# anim.save('anim.gif', dpi=150)",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()",
            "update"
          ],
          "code_str": "plot.update",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot.update"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation"
          ],
          "code_str": "FuncAnimation",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()"
          ],
          "code_str": "anim",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation",
            "()",
            "to_jshtml"
          ],
          "code_str": "anim.to_jshtml",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.animation.Animation.to_jshtml"
        }
      ],
      "example": {
        "document": "examples/animations",
        "ref_id": "phase-space-animation",
        "headings": [
          "Animations",
          "Phase space animation"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "# especially for larger animations, it is good practice to clean up:\nplot.fig.clear()\n# xplt.plt.close()\ndel plot\nimport gc\n\ngc.collect();",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/animations",
        "ref_id": "phase-space-animation",
        "headings": [
          "Animations",
          "Phase space animation"
        ]
      },
      "doc_lineno": 120002
    }
  ],
  "examples/colors": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xplt\n\nxplt.apply_style()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        }
      ],
      "example": {
        "document": "examples/colors",
        "ref_id": "colors",
        "headings": [
          "Colors"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "xplt.cmap_petroff",
      "names": [],
      "example": {
        "document": "examples/colors",
        "ref_id": "color-palette",
        "headings": [
          "Colors",
          "Color palette"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "xplt.cmap_petroff_gradient",
      "names": [],
      "example": {
        "document": "examples/colors",
        "ref_id": "color-gradients",
        "headings": [
          "Colors",
          "Color gradients"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "xplt.cmap_petroff_bipolar",
      "names": [],
      "example": {
        "document": "examples/colors",
        "ref_id": "color-gradients",
        "headings": [
          "Colors",
          "Color gradients"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "xplt.cmap_petroff_cyclic",
      "names": [],
      "example": {
        "document": "examples/colors",
        "ref_id": "color-gradients",
        "headings": [
          "Colors",
          "Color gradients"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "plt.figure(figsize=(5, 1))\nplt.plot(np.linspace(5, 0) % 2)\nplt.plot(np.linspace(0, 5) % 2, color=\"p2\");",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        }
      ],
      "example": {
        "document": "examples/colors",
        "ref_id": "usage",
        "headings": [
          "Colors",
          "Usage"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "fig, ax = plt.subplots()\nt = np.linspace(0, 2 * np.pi, 1024)\ndata2d = np.sin(t)[:, np.newaxis] * np.cos(t)[np.newaxis, :]\nim = ax.imshow(data2d, cmap=\"petroff_bipolar\")\nfig.colorbar(im, ax=ax, label=\"Color\");",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.cos"
        }
      ],
      "example": {
        "document": "examples/colors",
        "ref_id": "usage",
        "headings": [
          "Colors",
          "Usage"
        ]
      },
      "doc_lineno": 190002
    }
  ],
  "examples/concepts": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport xplt\n\nnp.random.seed(4873153)\n\nxplt.apply_style()\n\nxplt.mpl.rcParams[\"figure.figsize\"] = (3, 2)",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "common-concepts",
        "headings": [
          "Common concepts"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "data = xplt.util.AttrDict(\n    label=\"Data A\",\n    x=1e-3 * np.random.normal(size=10000),\n    y=2e-3 * (0.5 + np.random.normal(size=10000)),\n)\ndata2 = xplt.util.AttrDict(\n    label=\"Data B\",\n    x=2e-3 + 3 * data.x,\n    y=data.y / 2 - 3e-3,\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict"
          ],
          "code_str": "xplt.util.AttrDict",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict"
          ],
          "code_str": "xplt.util.AttrDict",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data2",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "common-concepts",
        "headings": [
          "Common concepts"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "plot = xplt.ParticleHistogramPlot(\"x\", particles=data)",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot"
          ],
          "code_str": "xplt.ParticleHistogramPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "creating-plots",
        "headings": [
          "Common concepts",
          "Creating plots"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "plot = xplt.ParticleHistogramPlot(\"x\", particles=data, mask=data.x < 1e-3)",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot"
          ],
          "code_str": "xplt.ParticleHistogramPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "creating-plots",
        "headings": [
          "Common concepts",
          "Creating plots"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "plot = xplt.ParticleHistogramPlot(\n    \"x\", bin_width=1e-4, plot_kwargs=dict(label=\"Data A\")\n)\nplot.update(data);",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot"
          ],
          "code_str": "xplt.ParticleHistogramPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()",
            "update"
          ],
          "code_str": "plot.update",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot.update"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "updating-plot-data",
        "headings": [
          "Common concepts",
          "Creating plots",
          "Updating plot data"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "plot.add_dataset(\n    \"ref\",  # optional ID to update data later\n    particles=data2,\n    plot_kwargs=dict(label=\"Data B\", c=\"C2\", lw=2),\n    autoscale=True,\n)\nplot.fig",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()",
            "add_dataset"
          ],
          "code_str": "plot.add_dataset",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot.add_dataset"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data2",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "updating-plot-data",
        "headings": [
          "Common concepts",
          "Creating plots",
          "Updating plot data"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "plot.update(data2, mask=data2.x > 0, dataset_id=\"ref\")\nplot.fig",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()",
            "update"
          ],
          "code_str": "plot.update",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot.update"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data2",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "updating-plot-data",
        "headings": [
          "Common concepts",
          "Creating plots",
          "Updating plot data"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "plot.autoscale(axis=\"x\", tight=False, reset=True)\nplot.fig",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()",
            "autoscale"
          ],
          "code_str": "plot.autoscale",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot.autoscale"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "updating-plot-data",
        "headings": [
          "Common concepts",
          "Creating plots",
          "Updating plot data"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "xplt.mpl.rcParams[\"figure.figsize\"] = (6.4, 4.8)\n\nfig, axs = plt.subplots(2, 2, sharex=\"col\", sharey=\"row\")\nfig.suptitle(\"A composed plot\")\n\nfor i, p in enumerate(\"xy\"):\n    for j, dat in enumerate((data, data2)):\n        plot = xplt.ParticleHistogramPlot(\n            p,\n            dat,\n            \"count,cumulative\",\n            ax=axs[:, i],\n            plot_kwargs=dict(label=dat.label, ls=f\"-{j}\"),  # customization\n        )\n        if i == 0:\n            break\n\nfor a in axs[:, 1]:\n    a.set(ylabel=None)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "AttrDict",
            "()"
          ],
          "code_str": "data2",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xplt.util.AttrDict"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot"
          ],
          "code_str": "xplt.ParticleHistogramPlot",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "composing-plots",
        "headings": [
          "Common concepts",
          "Creating plots",
          "Composing plots"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "# custom data\nN = 10000\ndata = {\n    \"h\": np.linspace(0, 100, num=N),\n    \"w\": np.random.normal(size=N),\n    \"x\": np.random.normal(size=N),\n    \"y\": np.random.normal(size=N),\n}",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "properties-units-and-labels",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(data, \"x-y\", display_units=dict(y=\"m\"))",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "properties-units-and-labels",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "# our data[\"w\"] is the width in km\nxplt.register_data_property(\"w\", data_unit=\"km\", symbol=\"$w_x$\", description=\"Width\")",
      "names": [
        {
          "import_components": [
            "xplt",
            "register_data_property"
          ],
          "code_str": "xplt.register_data_property",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.properties.register_data_property"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "adding-custom-data-properties",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Adding custom data properties"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "# our data[\"h\"] is in mm, but we want to convert it to cm\nplot = xplt.PhaseSpacePlot(\n    data, \"w-h\", data_units={\"h\": \"mm\"}, display_units={\"h\": \"cm\"}\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "adding-custom-data-properties",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Adding custom data properties"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "# since both x and y are know properties (in meter), A is known to be in square meter\nxplt.register_derived_property(\"A\", lambda x, y: x * y, description=\"Area\")\n# since the unit of `6` can not be inferred, we declare B to be in square meter too\nxplt.register_derived_property(\"B\", lambda A: A + 6, unit=\"m^2\")",
      "names": [
        {
          "import_components": [
            "xplt",
            "register_derived_property"
          ],
          "code_str": "xplt.register_derived_property",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.properties.register_derived_property"
        },
        {
          "import_components": [
            "xplt",
            "register_derived_property"
          ],
          "code_str": "xplt.register_derived_property",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.properties.register_derived_property"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "derived-properties",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Derived properties"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(data, \"A-w\")",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "derived-properties",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Derived properties"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "from IPython.display import display, Markdown\nimport pandas\nimport pint\n\n\ndef get_subclass_names(classname):\n    all = {classname.__name__: classname}\n    for subclassname in classname.__subclasses__():\n        all.update(get_subclass_names(subclassname))\n    return all\n\n\ndef display_class_info(cls):\n    md = \"Additional default properties applicable only to:\"\n    for name, c in sorted(get_subclass_names(cls).items()):\n        if name.endswith(\"Plot\") and not \".. deprecated::\" in c.__doc__:\n            md += f\" {{class}}`{name} <{c.__module__}.{c.__qualname__}>`\\n\"\n    display(Markdown(md))\n\n\ndef display_property_info(properties):\n    der = np.any(\n        [isinstance(p, xplt.properties.DerivedProperty) for p in properties.values()]\n    )\n    df = pandas.DataFrame(columns=[\"Unit\", \"Symbol\", \"Description\", \"Derived from\"])\n    df.index.name = \"Property\"\n    for p, prop in sorted(properties.items()):\n        df.loc[f\"`{p}`\"] = [\n            f\"$ {pint.Unit(prop.unit):~#L} $\",\n            prop.symbol,\n            prop.description or \"\",\n            (\n                f\"`{'` `'.join(prop.evaluate.__code__.co_varnames)}`\"\n                if isinstance(prop, xplt.properties.DerivedProperty)\n                else \"\"\n            ),\n        ]\n    # https://github.com/jupyter-book/jupyter-book/issues/1501#issuecomment-2301641068\n    display(Markdown(df.to_markdown()))\n\n\ndisplay_property_info(xplt.properties._default_properties)",
      "names": [
        {
          "import_components": [
            "numpy",
            "any"
          ],
          "code_str": "np.any",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.any"
        },
        {
          "import_components": [
            "xplt",
            "properties",
            "DerivedProperty"
          ],
          "code_str": "xplt.properties.DerivedProperty",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "xplt.properties.DerivedProperty"
        },
        {
          "import_components": [
            "xplt",
            "properties",
            "DerivedProperty"
          ],
          "code_str": "xplt.properties.DerivedProperty",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "xplt.properties.DerivedProperty"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "default-properties",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Default properties"
        ]
      },
      "doc_lineno": 460002
    },
    {
      "source": "display_class_info(xplt.particles.ParticlePlotMixin)\ndisplay_property_info(\n    xplt.particles.ParticlePlotMixin()._init_particle_mixin()[\"_properties\"]\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "particles",
            "ParticlePlotMixin"
          ],
          "code_str": "xplt.particles.ParticlePlotMixin",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticlePlotMixin"
        },
        {
          "import_components": [
            "xplt",
            "particles",
            "ParticlePlotMixin"
          ],
          "code_str": "xplt.particles.ParticlePlotMixin",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.particles.ParticlePlotMixin"
        },
        {
          "import_components": [
            "xplt",
            "particles",
            "ParticlePlotMixin",
            "()",
            "_init_particle_mixin"
          ],
          "code_str": "_init_particle_mixin",
          "lineno": 3,
          "end_lineno": 3,
          "context": "after_call",
          "resolved_location": "xplt.particles.ParticlePlotMixin._init_particle_mixin"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "particle-plots",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Default properties",
          "Particle plots"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "display_class_info(xplt.particles.ParticleHistogramPlotMixin)\ndisplay_property_info(xplt.particles.ParticleHistogramPlotMixin()._init_particle_histogram_mixin()[\"_properties\"])  # fmt: skip",
      "names": [
        {
          "import_components": [
            "xplt",
            "particles",
            "ParticleHistogramPlotMixin"
          ],
          "code_str": "xplt.particles.ParticleHistogramPlotMixin",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlotMixin"
        },
        {
          "import_components": [
            "xplt",
            "particles",
            "ParticleHistogramPlotMixin"
          ],
          "code_str": "xplt.particles.ParticleHistogramPlotMixin",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlotMixin"
        },
        {
          "import_components": [
            "xplt",
            "particles",
            "ParticleHistogramPlotMixin",
            "()",
            "_init_particle_histogram_mixin"
          ],
          "code_str": "_init_particle_histogram_mixin",
          "lineno": 2,
          "end_lineno": 2,
          "context": "after_call",
          "resolved_location": "xplt.particles.ParticleHistogramPlotMixin._init_particle_histogram_mixin"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "histogram-plots",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Default properties",
          "Histogram plots"
        ]
      },
      "doc_lineno": 510002
    },
    {
      "source": "display_class_info(xplt.timestructure.MetricesMixin)\ndisplay_property_info(xplt.timestructure.MetricesMixin._metric_properties)",
      "names": [
        {
          "import_components": [
            "xplt",
            "timestructure",
            "MetricesMixin"
          ],
          "code_str": "xplt.timestructure.MetricesMixin",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.MetricesMixin"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "spill-quality-plots",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Default properties",
          "Spill quality plots"
        ]
      },
      "doc_lineno": 530002
    },
    {
      "source": "display_class_info(xplt.line.FloorPlot)\ndisplay_property_info(xplt.line.FloorPlot()._default_properties)\nxplt.mpl.pyplot.close()",
      "names": [
        {
          "import_components": [
            "xplt",
            "line",
            "FloorPlot"
          ],
          "code_str": "xplt.line.FloorPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "line",
            "FloorPlot"
          ],
          "code_str": "xplt.line.FloorPlot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "mpl",
            "pyplot",
            "close"
          ],
          "code_str": "xplt.mpl.pyplot.close",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.close"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "floor-plot",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Default properties",
          "Floor plot"
        ]
      },
      "doc_lineno": 560002
    },
    {
      "source": "display_class_info(xplt.twiss.TwissPlot)\ndisplay_property_info(xplt.twiss.TwissPlot()._default_properties)\nxplt.mpl.pyplot.close()",
      "names": [
        {
          "import_components": [
            "xplt",
            "twiss",
            "TwissPlot"
          ],
          "code_str": "xplt.twiss.TwissPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "twiss",
            "TwissPlot"
          ],
          "code_str": "xplt.twiss.TwissPlot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "mpl",
            "pyplot",
            "close"
          ],
          "code_str": "xplt.mpl.pyplot.close",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.close"
        }
      ],
      "example": {
        "document": "examples/concepts",
        "ref_id": "twiss-plot",
        "headings": [
          "Common concepts",
          "Properties, Units and Labels",
          "Default properties",
          "Twiss plot"
        ]
      },
      "doc_lineno": 590002
    }
  ],
  "examples/hamiltonians": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport xtrack as xt\nimport xpart as xp\nimport xplt\nimport numpy as np\n\nxplt.apply_style()\n\nnp.random.seed(43543557)",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        }
      ],
      "example": {
        "document": "examples/hamiltonians",
        "ref_id": "hamiltonians",
        "headings": [
          "Hamiltonians"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "## Generate a simple 6-fold symmetric FODO lattice\n\nn = 6  # number of sections\nelements = {\n    \"QF\": xt.Multipole(length=0.3, knl=[0, +0.63]),\n    \"QD\": xt.Multipole(length=0.3, knl=[0, -0.48]),\n    \"MU\": xt.Multipole(length=0.5, knl=[np.pi / n], hxl=[np.pi / n]),\n}\nparts = {\n    \"a\": [\n        xt.Node(0.7, \"QF\"),\n        xt.Node(1.4, \"MU\"),\n        xt.Node(2.1, \"QD\"),\n        xt.Node(2.8, \"MU\"),\n    ],\n    \"b\": [\n        xt.Node(2.2, \"MU\"),\n        xt.Node(2.9, \"QD\"),\n        xt.Node(3.6, \"MU\"),\n        xt.Node(4.3, \"QF\"),\n    ],\n}\nnodes = [xt.Node(5.0 * i, \"a\" if i % 2 else \"b\", name=f\"S{i+1}\") for i in range(n)]\n\n# sextupoles\nfor i in range(n):\n    sx = xt.Multipole(length=0.2, knl=[0, 0, 0.5 * np.sin(2 * np.pi * (i / n))])\n    nodes.append(xt.Node(0.2, sx, from_=f\"S{i+1}\", name=f\"S{i+1}SX\"))\n\n# aperture\nnodes.append(xt.Node(0, xt.LimitRect(min_x=-0.01, max_x=0.01), name=\"APERTURE\"))\n\nline = xt.Line.from_sequence(\n    nodes, length=5.0 * n, sequences=parts, elements=elements, auto_reorder=True\n)\nline.particle_ref = xp.Particles()\nline.build_tracker();",
      "names": [
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "LimitRect"
          ],
          "code_str": "xt.LimitRect",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.apertures.LimitRect"
        },
        {
          "import_components": [
            "xpart",
            "Particles"
          ],
          "code_str": "xp.Particles",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "xtrack.particles.particles.Particles"
        }
      ],
      "example": {
        "document": "examples/hamiltonians",
        "ref_id": "hamiltonians",
        "headings": [
          "Hamiltonians"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "## Generate particles\nnparticles = int(1e4)\n\n# Transverse distribution (gaussian)\nnorm_emitt_x = 4e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_x)\nnorm_emitt_y = 1e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_y)\nx, px = xp.generate_2D_gaussian(nparticles)\ny, py = xp.generate_2D_gaussian(nparticles)\n\n# Longitudinal distribution (coasting beam)\nrel_momentum_spread = 1e-4  # relative momentum spread ( P/p0 - 1 )\nzeta = line.get_length() * np.random.uniform(-0.5, 0.5, nparticles)\ndelta = rel_momentum_spread * xp.generate_2D_gaussian(nparticles)[0]\n\nparticles = line.build_particles(\n    x_norm=x,\n    px_norm=px,\n    nemitt_x=norm_emitt_x,\n    y_norm=y,\n    py_norm=py,\n    nemitt_y=norm_emitt_y,\n    method=\"4d\",  # for twiss (default is 6d, won't work without a cavity)\n    zeta=zeta,\n    delta=delta,\n)",
      "names": [
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "uniform"
          ],
          "code_str": "np.random.uniform",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.uniform"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        }
      ],
      "example": {
        "document": "examples/hamiltonians",
        "ref_id": "kobayashi-hamiltonian",
        "headings": [
          "Hamiltonians",
          "Kobayashi Hamiltonian"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "## Track for a few turns and then stop at the sextupole\nline.track(particles, num_turns=500, ele_stop=7)\nprint(f\"{np.sum(particles.state <= 0)} of {len(particles.state)} particles lost\")\n\n## Determine twiss parameters for normalized phase space plots\ntw = line.twiss(method=\"4d\", at_elements=[7])\n\nprint(f\"qx: {tw.qx:g}\")",
      "names": [
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "examples/hamiltonians",
        "ref_id": "kobayashi-hamiltonian",
        "headings": [
          "Hamiltonians",
          "Kobayashi Hamiltonian"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(\n    particles,\n    mask=particles.state > 0,\n    kind=\"X,x\",\n    # plot='scatter',\n    twiss=tw,\n    hist_kwargs=dict(gridsize=50),\n)\n\n# determine the virtual sextupole\nS, mu = xplt.util.virtual_sextupole(line, verbose=True)\n\n# plot the hamiltonian\nplot.plot_hamiltonian_kobayashi(0, S=S, mu=mu, extend=5)\nplot.plot_hamiltonian_kobayashi(1, S=S, mu=mu, equipotentials=False)\nplot.plot_hamiltonian_kobayashi(\n    1,\n    S=S,\n    mu=mu,\n    equipotentials=False,\n    delta=3e-4,\n    separatrix_kwargs=dict(alpha=0.3),\n)\nplot.axis(0).legend();",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "util",
            "virtual_sextupole"
          ],
          "code_str": "xplt.util.virtual_sextupole",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "xplt.util.virtual_sextupole"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()",
            "plot_hamiltonian_kobayashi"
          ],
          "code_str": "plot.plot_hamiltonian_kobayashi",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot.plot_hamiltonian_kobayashi"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()",
            "plot_hamiltonian_kobayashi"
          ],
          "code_str": "plot.plot_hamiltonian_kobayashi",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot.plot_hamiltonian_kobayashi"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()",
            "plot_hamiltonian_kobayashi"
          ],
          "code_str": "plot.plot_hamiltonian_kobayashi",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot.plot_hamiltonian_kobayashi"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()",
            "axis"
          ],
          "code_str": "plot.axis",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot.axis"
        }
      ],
      "example": {
        "document": "examples/hamiltonians",
        "ref_id": "kobayashi-hamiltonian",
        "headings": [
          "Hamiltonians",
          "Kobayashi Hamiltonian"
        ]
      },
      "doc_lineno": 100002
    }
  ],
  "examples/line": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport xtrack as xt\nimport xpart as xp\nimport xplt\nimport numpy as np\n\nxplt.apply_style()\n\nnp.random.seed(36963142)",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "beamline",
        "headings": [
          "Beamline"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "## Generate a simple 6-fold symmetric FODO lattice\n\nn = 6  # number of sections\nelements = {\n    \"QF\": xt.Quadrupole(length=0.3, k1=0.63 / 0.3),\n    \"QD\": xt.Quadrupole(length=0.3, k1=-0.48 / 0.3),\n    \"MU\": xt.Bend(length=0.5, knl=[np.pi / n], h=np.pi / n / 0.5),\n}\nparts = {\n    \"a\": [\n        xt.Node(0.7, \"QF\"),\n        xt.Node(1.4, \"MU\"),\n        xt.Node(2.1, \"QD\"),\n        xt.Node(2.8, \"MU\"),\n    ],\n    \"b\": [\n        xt.Node(2.2, \"MU\"),\n        xt.Node(2.9, \"QD\"),\n        xt.Node(3.6, \"MU\"),\n        xt.Node(4.3, \"QF\"),\n    ],\n}\nnodes = [xt.Node(5.0 * i, \"a\" if i % 2 else \"b\", name=f\"S{i+1}\") for i in range(n)]\n\n# sextupoles\nfor i in range(n):\n    sx = xt.Sextupole(length=0.2, k2=0.5 * np.sin(2 * np.pi * (i / n)))\n    nodes.append(xt.Node(0.2, sx, from_=f\"S{i+1}\", name=f\"S{i+1}SX\"))\n\nline = xt.Line.from_sequence(\n    nodes, length=5.0 * n, sequences=parts, elements=elements, auto_reorder=True\n)\nline.particle_ref = xp.Particles()\nline.build_tracker()\n\n\n## Generate a second line with horizontal and vertical bends\n\nenv = xt.Environment()\nenv.new(\"bend_v\", \"Bend\", rot_s_rad=np.pi / 2)\nenv.new(\"quad\", \"Quadrupole\", length=0.3)\nenv.new(\"sext\", \"Sextupole\", length=0.2)\nenv.new(\"oct\", \"Octupole\", length=0.1)\n\nline2 = env.new_line(\n    components=[\n        env.new(\"mb1\", \"Bend\", angle=np.pi / 6, length=1, at=5),\n        env.place([\"quad\", \"sext\"]),\n        env.new(\"mb2\", \"Bend\", angle=-np.pi / 6, length=1, at=10),\n        env.place([\"quad\", \"sext\"]),\n        env.new(\"mbv1\", \"bend_v\", angle=np.pi / 4, length=1, at=15),\n        env.place([\"quad\", \"oct\"]),\n        env.new(\"mbv2\", \"bend_v\", angle=-np.pi / 4, length=1, at=20),\n        env.place([\"quad\", \"oct\"]),\n        env.new(\"ev\", \"Marker\", at=25),\n    ]\n)",
      "names": [
        {
          "import_components": [
            "xtrack",
            "Quadrupole"
          ],
          "code_str": "xt.Quadrupole",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Quadrupole"
        },
        {
          "import_components": [
            "xtrack",
            "Quadrupole"
          ],
          "code_str": "xt.Quadrupole",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Quadrupole"
        },
        {
          "import_components": [
            "xtrack",
            "Bend"
          ],
          "code_str": "xt.Bend",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Bend"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Sextupole"
          ],
          "code_str": "xt.Sextupole",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Sextupole"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Sextupole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Sextupole"
        },
        {
          "import_components": [
            "xtrack",
            "Sextupole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Sextupole"
        },
        {
          "import_components": [
            "xpart",
            "Particles"
          ],
          "code_str": "xp.Particles",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "xtrack.particles.particles.Particles"
        },
        {
          "import_components": [
            "xtrack",
            "Environment"
          ],
          "code_str": "xt.Environment",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "xtrack.environment.Environment"
        },
        {
          "import_components": [
            "xtrack",
            "Environment",
            "()"
          ],
          "code_str": "env",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "xtrack.environment.Environment"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "numpy.pi"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "beamline",
        "headings": [
          "Beamline"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "survey = line.survey()\nplot = xplt.FloorPlot(survey, labels=[\"S.Q.\", \"S1SX\"])\nplot.legend()",
      "names": [
        {
          "import_components": [
            "xplt",
            "FloorPlot"
          ],
          "code_str": "xplt.FloorPlot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot",
            "()",
            "legend"
          ],
          "code_str": "plot.legend",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot.legend"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "survey",
        "headings": [
          "Beamline",
          "Survey"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "plot = xplt.FloorPlot(\n    line.survey(X0=4.5),\n    projection=\"XZ\",\n    #\n    # Adjust box style for element names matching regex\n    #\n    # default_boxes=False,  # use this to show *only* the boxes defined below (hiding the default elements)\n    boxes={\n        \"S.QF\": dict(color=\"limegreen\"),\n        \"S.QD\": True,  # default style for defocussing quads\n        \"S.SX\": dict(width=0.5),\n    },\n    #\n    # Adjust labels for element names matching regex\n    #\n    labels={\n        \"S.Q.\": True,  # default labels\n        \"S4MU1\": dict(\n            text=(\n                \"A bending magnet\\n\"\n                \"name: {name}\\n\"\n                \"l = {length} m\\n\"\n                \"k0l = {element.knl[0]:g} rad\"\n            ),\n            xytext=(-3, -4),\n            bbox={\"fc\": \"white\"},\n            font=\"monospace\",\n            c=\"red\",\n        ),\n    },\n    line=line,  # optional, here we need it only to access it in the custom label of S4MU1\n)\nplot.add_scale()\nplot.legend(loc=\"upper left\")",
      "names": [
        {
          "import_components": [
            "xplt",
            "FloorPlot"
          ],
          "code_str": "xplt.FloorPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot",
            "()",
            "add_scale"
          ],
          "code_str": "plot.add_scale",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot.add_scale"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot",
            "()",
            "legend"
          ],
          "code_str": "plot.legend",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot.legend"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "survey",
        "headings": [
          "Beamline",
          "Survey"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "fig, ax = xplt.mpl.pyplot.subplots(2, figsize=(6, 4), sharex=True)\n\n# First the default ZX projection, second the ZY projection\nsurvey = line2.survey()\nxplt.FloorPlot(survey, ax=ax[0])\nxplt.FloorPlot(survey, projection=\"ZY\", ax=ax[1])\n\nax[0].legend()\nax[0].set(xlabel=None);",
      "names": [
        {
          "import_components": [
            "xplt",
            "mpl",
            "pyplot",
            "subplots"
          ],
          "code_str": "xplt.mpl.pyplot.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot"
          ],
          "code_str": "xplt.FloorPlot",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        },
        {
          "import_components": [
            "xplt",
            "FloorPlot"
          ],
          "code_str": "xplt.FloorPlot",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xplt.line.FloorPlot"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "survey",
        "headings": [
          "Beamline",
          "Survey"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "plot = xplt.KnlPlot(line, figsize=(7, 3))\nplot.ax.set(ylim=(-1, 1));",
      "names": [
        {
          "import_components": [
            "xplt",
            "KnlPlot"
          ],
          "code_str": "xplt.KnlPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.KnlPlot"
        },
        {
          "import_components": [
            "xplt",
            "KnlPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.KnlPlot"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "multipole-strength",
        "headings": [
          "Beamline",
          "Multipole strength"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "plot = xplt.KnlPlot(line, knl=\"k0l,k2l,k1l\", filled=False)",
      "names": [
        {
          "import_components": [
            "xplt",
            "KnlPlot"
          ],
          "code_str": "xplt.KnlPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.KnlPlot"
        },
        {
          "import_components": [
            "xplt",
            "KnlPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.line.KnlPlot"
        }
      ],
      "example": {
        "document": "examples/line",
        "ref_id": "multipole-strength",
        "headings": [
          "Beamline",
          "Multipole strength"
        ]
      },
      "doc_lineno": 170002
    }
  ],
  "examples/phasespace": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport xtrack as xt\nimport xpart as xp\nimport xplt\nimport numpy as np\n\nnp.random.seed(43543557)\n\nxplt.apply_style()",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "phasespace",
        "headings": [
          "Phasespace"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "## Generate a simple 6-fold symmetric FODO lattice\n\nn = 6  # number of sections\nelements = {\n    \"QF\": xt.Multipole(length=0.3, knl=[0, +0.63]),\n    \"QD\": xt.Multipole(length=0.3, knl=[0, -0.48]),\n    \"MU\": xt.Multipole(length=0.5, knl=[np.pi / n], hxl=[np.pi / n]),\n}\nparts = {\n    \"a\": [\n        xt.Node(0.7, \"QF\"),\n        xt.Node(1.4, \"MU\"),\n        xt.Node(2.1, \"QD\"),\n        xt.Node(2.8, \"MU\"),\n    ],\n    \"b\": [\n        xt.Node(2.2, \"MU\"),\n        xt.Node(2.9, \"QD\"),\n        xt.Node(3.6, \"MU\"),\n        xt.Node(4.3, \"QF\"),\n    ],\n}\nnodes = [xt.Node(5.0 * i, \"a\" if i % 2 else \"b\", name=f\"S{i+1}\") for i in range(n)]\n\nline = xt.Line.from_sequence(\n    nodes, length=5.0 * n, sequences=parts, elements=elements, auto_reorder=True\n)\nline = line.cycle(4)\nline.particle_ref = xp.Particles()\nline.build_tracker();",
      "names": [
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xpart",
            "Particles"
          ],
          "code_str": "xp.Particles",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "xtrack.particles.particles.Particles"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "phasespace",
        "headings": [
          "Phasespace"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "## Generate particles\nnparticles = int(1e4)\n\n# Transverse distribution (gaussian)\nnorm_emitt_x = 4e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_x)\nnorm_emitt_y = 1e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_y)\nx, px = xp.generate_2D_gaussian(nparticles)\ny, py = xp.generate_2D_gaussian(nparticles)\n\n# Longitudinal distribution (coasting beam)\nrel_momentum_spread = 1e-4  # relative momentum spread ( P/p0 - 1 )\nzeta = line.get_length() * np.random.uniform(-0.5, 0.5, nparticles)\ndelta = rel_momentum_spread * xp.generate_2D_gaussian(nparticles)[0]\n\nparticles = line.build_particles(\n    x_norm=x,\n    px_norm=px,\n    nemitt_x=norm_emitt_x,\n    y_norm=y,\n    py_norm=py,\n    nemitt_y=norm_emitt_y,\n    method=\"4d\",  # for twiss (default is 6d, won't work without a cavity)\n    zeta=zeta,\n    delta=delta,\n)",
      "names": [
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "uniform"
          ],
          "code_str": "np.random.uniform",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.uniform"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "phasespace",
        "headings": [
          "Phasespace"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(particles)",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "default-phasespace-plot",
        "headings": [
          "Phasespace",
          "Default phasespace plot"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "plot = xplt.ParticleHistogramPlot(\n    \"x\", particles, kind=\"charge\", bin_width=1e-4, figsize=(4, 3)\n)  # bin_width is in data units (m)",
      "names": [
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot"
          ],
          "code_str": "xplt.ParticleHistogramPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        },
        {
          "import_components": [
            "xplt",
            "ParticleHistogramPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.particles.ParticleHistogramPlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "default-phasespace-plot",
        "headings": [
          "Phasespace",
          "Default phasespace plot"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(\n    particles,\n    mask=particles.particle_id < 1e4,\n    kind=\"x,y,x-y\",\n    plot=\"scatter\",  # using a scatter plot instead of a 2D histogram\n    scatter_kwargs=dict(alpha=0.2),  # scatter plot with semi-transparent color\n    projections=False,  # No projections onto axes\n    display_units=dict(p=\"urad\"),  # p as shorthand for px and py\n    mean=True,  # show mean cross for all\n    std=[True, None, True],  # show std ellipse for first and last\n    percentiles=[[90], [70, 80, 90], None],  # show some percentile ellipses\n)\nplot.ax[2].set(title=\"Transverse profile\");",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "customisation",
        "headings": [
          "Phasespace",
          "Customisation"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "tw = line.twiss(\n    method=\"4d\",\n    at_elements=np.unique(particles.at_element),  # twiss at location of particles\n)",
      "names": [
        {
          "import_components": [
            "numpy",
            "unique"
          ],
          "code_str": "np.unique",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.unique"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "normalized-coordinates",
        "headings": [
          "Phasespace",
          "Normalized coordinates"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(particles, kind=\"X,Y-Py\", twiss=tw, std=True)",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "normalized-coordinates",
        "headings": [
          "Phasespace",
          "Normalized coordinates"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(\n    particles,\n    \"x,y,zeta_wrapped-delta\",\n    color=\"\u0398x,Jy,t\",  # <-- color by value\n    cmap=\"petroff_cyclic\",\n    cbar_loc=\"inside upper right\",\n    twiss=tw,\n    grid=False,\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "color-by-3rd-coordinate",
        "headings": [
          "Phasespace",
          "Color by 3rd coordinate"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "line.track(particles, num_turns=100, turn_by_turn_monitor=True)",
      "names": [],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "monitor-data",
        "headings": [
          "Phasespace",
          "Monitor data"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(\n    line.record_last_track,\n    mask=(slice(None), 83),  # select all particles and turn 83\n    mean=(1, 1, 0),\n    std=(1, 1, 0),\n)\nplot.fig.suptitle(\"Particle distribution for a single turn\");",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "monitor-data",
        "headings": [
          "Phasespace",
          "Monitor data"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(\n    line.record_last_track,\n    kind=\"y,y\",\n    titles=(\"First turn\", \"Last turn\"),\n    sharex=\"all\",\n    sharey=\"all\",\n    masks=[\n        (slice(500), 0),\n        (slice(500), -1),\n    ],  # select 500 particles at first and last turn\n    projections=\"x\",\n    mean=True,\n    std=True,\n)\nplot.ax[1].set(ylabel=None);",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "monitor-data",
        "headings": [
          "Phasespace",
          "Monitor data"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "plot = xplt.PhaseSpacePlot(\n    line.record_last_track,\n    mask=([17, 18, 21], slice(None)),  # select particles 17,18,21 and all turns\n    projections=False,\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "monitor-data",
        "headings": [
          "Phasespace",
          "Monitor data"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "ax = None\nfor particle_i in (17, 18, 21):\n    plot = xplt.PhaseSpacePlot(\n        line.record_last_track,\n        mask=(particle_i, slice(None)),  # select particle i and all turns\n        scatter_kwargs=dict(label=f\"#{particle_i}\"),\n        kind=\"X\",\n        twiss=tw,\n        titles=(\"Trace of single particles\",),\n        ax=ax,  # draw on same plot as before\n    )\n    ax = plot.ax\n\nax.legend(title=\"Particle\");",
      "names": [
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "examples/phasespace",
        "ref_id": "monitor-data",
        "headings": [
          "Phasespace",
          "Monitor data"
        ]
      },
      "doc_lineno": 370002
    }
  ],
  "examples/timestructure": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport xtrack as xt\nimport xpart as xp\nimport xplt\nimport numpy as np\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import display, HTML\n\nxplt.apply_style()\n\nnp.random.seed(43543557)",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 9,
          "end_lineno": 9,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "matplotlib",
            "animation"
          ],
          "code_str": "matplotlib.animation",
          "lineno": 10,
          "end_lineno": 10,
          "context": "import_from",
          "resolved_location": "matplotlib.animation"
        },
        {
          "import_components": [
            "matplotlib",
            "animation",
            "FuncAnimation"
          ],
          "code_str": "FuncAnimation",
          "lineno": 10,
          "end_lineno": 10,
          "context": "import_target",
          "resolved_location": "matplotlib.animation.FuncAnimation"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "timestructure-spill-schottky",
        "headings": [
          "Timestructure (Spill, Schottky)"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "## Generate a simple 6-fold symmetric FODO lattice\n\nn = 6  # number of sections\nelements = {\n    \"QF\": xt.Multipole(length=0.3, knl=[0, +0.63]),\n    \"QD\": xt.Multipole(length=0.3, knl=[0, -0.48]),\n    \"MU\": xt.Multipole(length=0.5, knl=[np.pi / n], hxl=[np.pi / n]),\n}\nparts = {\n    \"a\": [\n        xt.Node(0.7, \"QF\"),\n        xt.Node(1.4, \"MU\"),\n        xt.Node(2.1, \"QD\"),\n        xt.Node(2.8, \"MU\"),\n    ],\n    \"b\": [\n        xt.Node(2.2, \"MU\"),\n        xt.Node(2.9, \"QD\"),\n        xt.Node(3.6, \"MU\"),\n        xt.Node(4.3, \"QF\"),\n    ],\n}\nnodes = [xt.Node(5.0 * i, \"a\" if i % 2 else \"b\", name=f\"S{i+1}\") for i in range(n)]\n\n# sextupoles\nfor i in range(n):\n    sx = xt.Multipole(length=0.2, knl=[0, 0, 0.5 * np.sin(2 * np.pi * (i / n))])\n    nodes.append(xt.Node(0.2, sx, from_=f\"S{i+1}\", name=f\"S{i+1}SX\"))\n\n# aperture\nnodes.append(xt.Node(0, xt.LimitRect(min_x=-0.01, max_x=0.01), name=\"APERTURE\"))\n\nline = xt.Line.from_sequence(\n    nodes, length=5.0 * n, sequences=parts, elements=elements, auto_reorder=True\n)\nline.particle_ref = xp.Particles()\nline.build_tracker();",
      "names": [
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "LimitRect"
          ],
          "code_str": "xt.LimitRect",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.apertures.LimitRect"
        },
        {
          "import_components": [
            "xpart",
            "Particles"
          ],
          "code_str": "xp.Particles",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "xtrack.particles.particles.Particles"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "timestructure-spill-schottky",
        "headings": [
          "Timestructure (Spill, Schottky)"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "## Generate particles\nnparticles = int(1e4)\n\n# Transverse distribution (gaussian)\nnorm_emitt_x = 3e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_x)\nnorm_emitt_y = 4e-6  # normalized 1-sigma emittance in m*rad (=beta*gamma*emitt_y)\nx, px = xp.generate_2D_gaussian(nparticles)\ny, py = xp.generate_2D_gaussian(nparticles)\n\n# Longitudinal distribution (coasting beam)\nrel_momentum_spread = 1e-4  # relative momentum spread ( P/p0 - 1 )\nzeta = line.get_length() * np.random.uniform(-0.5, 0.5, nparticles)\ndelta = rel_momentum_spread * xp.generate_2D_gaussian(nparticles)[0]\n\nparticles = line.build_particles(\n    x_norm=x,\n    px_norm=px,\n    nemitt_x=norm_emitt_x,\n    y_norm=y,\n    py_norm=py,\n    nemitt_y=norm_emitt_y,\n    method=\"4d\",  # for twiss (default is 6d, won't work without a cavity)\n    zeta=zeta,\n    delta=delta,\n)\n\n\n# generate a timeseries dataset of particle arrival times\ncounts = np.random.poisson(5, 10000) ** np.linspace(2, 1, 10000)",
      "names": [
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "uniform"
          ],
          "code_str": "np.random.uniform",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.random.uniform"
        },
        {
          "import_components": [
            "xpart",
            "generate_2D_gaussian"
          ],
          "code_str": "xp.generate_2D_gaussian",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "xpart.generate_2D_gaussian"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "poisson"
          ],
          "code_str": "np.random.poisson",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.random.poisson"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.linspace"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "timestructure-spill-schottky",
        "headings": [
          "Timestructure (Spill, Schottky)"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "## Twiss\ntw = line.twiss(method=\"4d\")\n\n## Track\nline.track(particles, num_turns=500, turn_by_turn_monitor=True)",
      "names": [],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "timestructure-spill-schottky",
        "headings": [
          "Timestructure (Spill, Schottky)"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "plot = xplt.TimePlot(particles, \"x+y\", mask=particles.state <= 0, twiss=tw)",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimePlot"
          ],
          "code_str": "xplt.TimePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimePlot"
        },
        {
          "import_components": [
            "xplt",
            "TimePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimePlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "scatter-over-time",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Scatter over time"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "plot = xplt.TimeBinPlot(\n    particles,\n    \"rate+smooth(rate,n=10),count-cumulative\",  # what to plot\n    mask=particles.state <= 0,  # lost particles\n    twiss=tw,\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeBinPlot"
          ],
          "code_str": "xplt.TimeBinPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-intensity",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Binned time series",
          "Spill intensity"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "binned_counts = xplt.Timeseries(np.random.poisson(100, size=10000), dt=1e-4)\n\nplot = xplt.TimeBinPlot(\n    # timeseries=binned_counts,  # this assumes the timeseries represents counts\n    #                            # because 'kind=...' is count-based (rate=counts/s)\n    timeseries=dict(count=binned_counts),  # Explicit is better than implicit\n    kind=\"rate,count\",\n    bin_time=1e-3,\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "Timeseries"
          ],
          "code_str": "xplt.Timeseries",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.Timeseries"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "poisson"
          ],
          "code_str": "np.random.poisson",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.poisson"
        },
        {
          "import_components": [
            "xplt",
            "Timeseries",
            "()"
          ],
          "code_str": "binned_counts",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.Timeseries"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinPlot"
          ],
          "code_str": "xplt.TimeBinPlot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        },
        {
          "import_components": [
            "xplt",
            "Timeseries",
            "()"
          ],
          "code_str": "binned_counts",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xplt.timestructure.Timeseries"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-intensity",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Binned time series",
          "Spill intensity"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "plot = xplt.TimeBinPlot(\n    line.record_last_track,\n    \"y\",  # y-position\n    # moment=1,  # the average (this is the default anyways)\n    twiss=tw,\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeBinPlot"
          ],
          "code_str": "xplt.TimeBinPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "transverse-beam-position-bpm",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Binned time series",
          "Transverse beam position (BPM)"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "plot = xplt.TimeBinPlot(\n    particles,\n    \"charge-count,current-rate\",\n    twiss=tw,\n    mask=particles.state > 0,  # alive particles\n)\nplot.legend(show=False)",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeBinPlot"
          ],
          "code_str": "xplt.TimeBinPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinPlot",
            "()",
            "legend"
          ],
          "code_str": "plot.legend",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinPlot.legend"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "longitudinal-bunch-shape",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Binned time series",
          "Longitudinal bunch shape"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "plot = xplt.TimeIntervalPlot(particles, dt_max=1e-9, log=True, twiss=tw)",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeIntervalPlot"
          ],
          "code_str": "xplt.TimeIntervalPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeIntervalPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeIntervalPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeIntervalPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "consecutive-particle-delay",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Consecutive particle delay"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "plot = xplt.SpillQualityPlot(\n    # particles, mask=particles.state <= 0, twiss=tw, # pass the lost particles\n    timeseries=xplt.Timeseries(  # we can also use pre-binned timeseries data instead\n        counts, dt=1e-6\n    ),\n    kind=\"duty\",\n    counting_dt=None,  # interval for particle counting for (re-)binning\n    evaluate_dt=None,  # interval to evaluate metric\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "SpillQualityPlot"
          ],
          "code_str": "xplt.SpillQualityPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.SpillQualityPlot"
        },
        {
          "import_components": [
            "xplt",
            "Timeseries"
          ],
          "code_str": "xplt.Timeseries",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.timestructure.Timeseries"
        },
        {
          "import_components": [
            "xplt",
            "SpillQualityPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.SpillQualityPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-quality",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Spill quality"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "plot = xplt.SpillQualityTimescalePlot(\n    # particles, mask=particles.state <= 0, twiss=tw, # pass the lost particles\n    timeseries=xplt.Timeseries(\n        counts, dt=1e-6\n    ),  # or we can also use pre-binned timeseries data instead\n    kind=\"cv\",\n)",
      "names": [
        {
          "import_components": [
            "xplt",
            "SpillQualityTimescalePlot"
          ],
          "code_str": "xplt.SpillQualityTimescalePlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.SpillQualityTimescalePlot"
        },
        {
          "import_components": [
            "xplt",
            "Timeseries"
          ],
          "code_str": "xplt.Timeseries",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "xplt.timestructure.Timeseries"
        },
        {
          "import_components": [
            "xplt",
            "SpillQualityTimescalePlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.SpillQualityTimescalePlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-quality",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Spill quality"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "dt_count = 50e-9\nbins = 1000\ndt_evaluate = dt_count * bins\n\n# use helper to calculate metric\nhelper = xplt.TimeBinMetricHelper(twiss=tw)\nt_min, dt_count, counts = helper.binned_timeseries(\n    particles, dt_count, mask=particles.state <= 0\n)\nCv, Cv_poisson = helper.calculate_metric(counts, \"cv\", bins)\n\n# plot it\nfig, ax = plt.subplots(figsize=(4, 1), constrained_layout=True)\nstyle = dict(marker=\".\", ls=\"\", capsize=3, label=\"Spill quality\")\nax.errorbar(np.nanmean(Cv), [\"Dataset sample\"], xerr=np.nanstd(Cv), **style)\nstyle = dict(hatch=\"////\", ec=\"#aaa\", fc=\"none\", label=\"Poisson limit\")\nax.add_patch(\n    mpl.patches.Rectangle((np.nanmean(Cv_poisson), -0.15), -10, 0.3, **style)\n)\nax.set(xlim=(4.5, 0))\n\n# use helper to style axes\nhelper._link_cv_duty_axes(ax, ax.twiny(), True, \"x\")\nax.legend(loc=\"upper right\", bbox_to_anchor=(0, 0));",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeBinMetricHelper"
          ],
          "code_str": "xplt.TimeBinMetricHelper",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinMetricHelper"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinMetricHelper",
            "()"
          ],
          "code_str": "helper",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinMetricHelper"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinMetricHelper",
            "()",
            "binned_timeseries"
          ],
          "code_str": "helper.binned_timeseries",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinMetricHelper.binned_timeseries"
        },
        {
          "import_components": [
            "xplt",
            "TimeBinMetricHelper",
            "()",
            "calculate_metric"
          ],
          "code_str": "helper.calculate_metric",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeBinMetricHelper.calculate_metric"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "nanmean"
          ],
          "code_str": "np.nanmean",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.nanmean"
        },
        {
          "import_components": [
            "numpy",
            "nanstd"
          ],
          "code_str": "np.nanstd",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.nanstd"
        },
        {
          "import_components": [
            "matplotlib",
            "patches",
            "Rectangle"
          ],
          "code_str": "mpl.patches.Rectangle",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.patches.Rectangle"
        },
        {
          "import_components": [
            "numpy",
            "nanmean"
          ],
          "code_str": "np.nanmean",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.nanmean"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-quality",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Spill quality"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "plot = xplt.TimeFFTPlot(\n    particles,\n    \"count+smooth(count,n=100),cumulative\",\n    mask=particles.state <= 0,  # only lost particles\n    fmax=1e10,\n    log=True,\n    twiss=tw,\n)\nplot.ax[0].set(xlim=(1e5, None))\nfor a in plot.ax:\n    a.set(ylabel=a.get_ylabel().replace(\"   \", \"\\n\"))",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot"
          ],
          "code_str": "xplt.TimeFFTPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-fluctuations",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Frequency domain",
          "Spill fluctuations"
        ]
      },
      "doc_lineno": 370002
    },
    {
      "source": "fig, ax = plt.subplots(1, 2, figsize=(8, 3), sharey=True)\n\nfor i, a in enumerate(ax):\n    plot = xplt.TimeFFTPlot(\n        particles,\n        mask=particles.state <= 0,\n        twiss=tw,\n        fmax=1e10,\n        log=\"xy\" if i else \"y\",\n        averaging=dict(\n            lin=1000,  # for lin-scaled plots: integer number of bins to average\n            log=1.01,  # for log-scaled plots: increment factor for bin number\n        )[\"log\" if i else \"lin\"],\n        averaging_shadow_kwargs=dict(alpha=0.3),  # options to adjust the shadow\n        ax=a,\n    )\nax[1].set(xlim=(1e5, None), ylabel=None);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot"
          ],
          "code_str": "xplt.TimeFFTPlot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "spill-fluctuations",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Frequency domain",
          "Spill fluctuations"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "# select only a single particle\nmask = (0, None)\n\nplot = xplt.TimeFFTPlot(\n    line.record_last_track,\n    \"count\",\n    mask=mask,\n    fmax=50e6,\n    log=False,\n    display_units=dict(f=\"MHz\"),\n    twiss=tw,\n)\n\nfrev = 1 / tw.T_rev0\nfor i in range(10):\n    plot.ax.axvline(i * frev / 1e6, ls=\"--\", color=\"gray\", zorder=-1)",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot"
          ],
          "code_str": "xplt.TimeFFTPlot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "longitudinal-schottky-spectrum",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Frequency domain",
          "Longitudinal schottky spectrum"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "plot = xplt.TimeFFTPlot(\n    line.record_last_track,\n    \"x-y\",\n    twiss=tw,\n    relative=True,\n    log=False,\n    fmax=3 * frev,\n    fsamp=30 * frev,  # high sampling frequency to reduce aliasing\n)\n\nfor Q in (tw.qx, tw.qy):\n    plot.ax.axvline(Q, ls=\"--\", color=\"gray\", zorder=-1)\n    q, h = np.modf(Q)\n    for h in range(int(plot.ax.get_xlim()[1] + 1)):\n        [\n            plot.ax.axvline(x, ls=\":\", color=\"lightgray\", zorder=-1)\n            for x in (h - q, h + q)\n            if x != Q\n        ]",
      "names": [
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot"
          ],
          "code_str": "xplt.TimeFFTPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        },
        {
          "import_components": [
            "xplt",
            "TimeFFTPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.timestructure.TimeFFTPlot"
        },
        {
          "import_components": [
            "numpy",
            "modf"
          ],
          "code_str": "np.modf",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.modf"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "tune-or-transverse-schottky-spectrum",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Frequency domain",
          "Tune or transverse schottky spectrum"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "from matplotlib import pyplot as plt\n\nfig, ax = plt.subplots()\nfor xy in \"xy\":\n    p = getattr(line.record_last_track, xy)[0, :]\n    freq = np.fft.rfftfreq(len(p))\n    mag = np.abs(np.fft.rfft(p))\n    ax.plot(freq, mag, label=xy)\n    ax.axvline(np.modf(getattr(tw, \"q\" + xy))[0], ls=\"--\", color=\"gray\", zorder=-1)\nax.legend()\nax.set(xlabel=\"$f/f_\\\\mathrm{rev}$\", ylabel=\"FFT / a.u.\", xlim=(0, 1), yscale=\"log\");",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "fft",
            "rfftfreq"
          ],
          "code_str": "np.fft.rfftfreq",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.fft.rfftfreq"
        },
        {
          "import_components": [
            "numpy",
            "fft",
            "rfft"
          ],
          "code_str": "np.fft.rfft",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.fft.rfft"
        },
        {
          "import_components": [
            "numpy",
            "modf"
          ],
          "code_str": "np.modf",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.modf"
        }
      ],
      "example": {
        "document": "examples/timestructure",
        "ref_id": "tune-or-transverse-schottky-spectrum",
        "headings": [
          "Timestructure (Spill, Schottky)",
          "Frequency domain",
          "Tune or transverse schottky spectrum"
        ]
      },
      "doc_lineno": 460002
    }
  ],
  "examples/twiss": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport xtrack as xt\nimport xdeps as xd\nimport xpart as xp\nimport xplt\nimport numpy as np\n\nxplt.apply_style()",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "twiss",
        "headings": [
          "Twiss"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "## Generate a simple 6-fold symmetric FODO lattice\n\nn = 6  # number of sections\nelements = {\n    \"QF\": xt.Multipole(length=0.3, knl=[0, +0.63]),\n    \"QD\": xt.Multipole(length=0.3, knl=[0, -0.48]),\n    \"MU\": xt.Multipole(length=0.5, knl=[np.pi / n], hxl=[np.pi / n]),\n}\nparts = {\n    \"a\": [\n        xt.Node(0.7, \"QF\"),\n        xt.Node(1.4, \"MU\"),\n        xt.Node(2.1, \"QD\"),\n        xt.Node(2.8, \"MU\"),\n    ],\n    \"b\": [\n        xt.Node(2.2, \"MU\"),\n        xt.Node(2.9, \"QD\"),\n        xt.Node(3.6, \"MU\"),\n        xt.Node(4.3, \"QF\"),\n    ],\n}\nnodes = [xt.Node(5.0 * i, \"a\" if i % 2 else \"b\", name=f\"S{i+1}\") for i in range(n)]\n\n# sextupoles\nfor i in range(n):\n    sx = xt.Multipole(length=0.2, knl=[0, 0, 0.5 * np.sin(2 * np.pi * (i / n))])\n    nodes.append(xt.Node(0.2, sx, from_=f\"S{i+1}\", name=f\"S{i+1}SX\"))\n\n# apertures\nnodes.append(xt.Node(5, xt.LimitRect(min_x=-5e-3, max_x=3e-3, max_y=3e-3)))\nnodes.append(xt.Node(10, xt.LimitRectEllipse(max_x=6e-3, max_y=1)))\n\nline = xt.Line.from_sequence(\n    nodes, length=5.0 * n, sequences=parts, elements=elements, auto_reorder=True\n)\nline.particle_ref = xp.Particles()\nline.build_tracker();",
      "names": [
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole"
          ],
          "code_str": "xt.Multipole",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "Multipole",
            "()"
          ],
          "code_str": "sx",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.elements.Multipole"
        },
        {
          "import_components": [
            "xtrack",
            "LimitRect"
          ],
          "code_str": "xt.LimitRect",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.apertures.LimitRect"
        },
        {
          "import_components": [
            "xtrack",
            "LimitRectEllipse"
          ],
          "code_str": "xt.LimitRectEllipse",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "xtrack.beam_elements.apertures.LimitRectEllipse"
        },
        {
          "import_components": [
            "xpart",
            "Particles"
          ],
          "code_str": "xp.Particles",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "xtrack.particles.particles.Particles"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "twiss",
        "headings": [
          "Twiss"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "tw = line.twiss(\n    method=\"4d\", at_s=np.linspace(0, line.get_length(), 500, endpoint=False)\n)",
      "names": [
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.linspace"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "twiss",
        "headings": [
          "Twiss"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "plot = xplt.TwissPlot(tw, line=line)\nplot.axis(\"x\").set(ylim=(-7, 7));",
      "names": [
        {
          "import_components": [
            "xplt",
            "TwissPlot"
          ],
          "code_str": "xplt.TwissPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "axis"
          ],
          "code_str": "plot.axis",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.axis"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "default-twiss-plot",
        "headings": [
          "Twiss",
          "Default twiss plot"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "# Normalized emittance in m*rad\ncv = tw.get_betatron_sigmas(nemitt_x=1e-6, nemitt_y=1e-6)",
      "names": [],
      "example": {
        "document": "examples/twiss",
        "ref_id": "beam-size-plot",
        "headings": [
          "Twiss",
          "Beam size plot"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "plot = xplt.TwissPlot((tw, cv), \"envelope3_x, sigma, y + envelope_y\")",
      "names": [
        {
          "import_components": [
            "xplt",
            "TwissPlot"
          ],
          "code_str": "xplt.TwissPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "beam-size-plot",
        "headings": [
          "Twiss",
          "Beam size plot"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "ap = xplt.util.apertures(line)\nxd.Table(ap, index=\"s\").to_pandas()",
      "names": [
        {
          "import_components": [
            "xplt",
            "util",
            "apertures"
          ],
          "code_str": "xplt.util.apertures",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.util.apertures"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "apertures",
        "headings": [
          "Twiss",
          "Apertures"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "plot.plot_apertures(ap, lw=2, color=\"r\")\nplot.fig",
      "names": [
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "plot_apertures"
          ],
          "code_str": "plot.plot_apertures",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.plot_apertures"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "apertures",
        "headings": [
          "Twiss",
          "Apertures"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "plot = xplt.TwissPlot(\n    tw,\n    kind=\"bet,mux+muy,dx\",  # 3 subplots: plot beta functions (\"bet\"=\"betx+bety\") on the first,\n    #                                     phase advances on the second, and dispersion on the third\n    display_units=dict(d=\"dm\"),  # dispersion in deci-meter (\"d=\" for \"dx\" and \"dy\")\n    figsize=(6, 5),\n)\n\n# add some annotations\nplot.axline(\"s\", line.get_s_position(\"S6QF\"), annotation=\"S6QF\")\nplot.axspan(\"s\", 9, 11, label=\"Section 42\")\nplot.axline(\"muy\", tw.qy, annotation=f\"$Q_y={tw.qy:g}$\", annotation_loc=1)\n\n# adjust some axes\nplot.axis(0).set(title=\"Twiss plot example\", ylim=(0, 14))\nplot.axis(\"mux\").set(ylim=(0, tw.qx))\n\n# adjust line layout\nplot.artist(\"mux\").set(ls=\"--\")\nplot.artist(subplot=2).set(c=\"pet2\")\n\n# legend is shown by default for subplots with more than 1 trace\nplot.legend(1, loc=\"upper left\")  # call it manually to reflect updated line layout\n# plot.legend() # uncomment this to show legends on all subplots",
      "names": [
        {
          "import_components": [
            "xplt",
            "TwissPlot"
          ],
          "code_str": "xplt.TwissPlot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()"
          ],
          "code_str": "plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "axline"
          ],
          "code_str": "plot.axline",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.axline"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "axspan"
          ],
          "code_str": "plot.axspan",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.axspan"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "axline"
          ],
          "code_str": "plot.axline",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.axline"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "axis"
          ],
          "code_str": "plot.axis",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.axis"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "axis"
          ],
          "code_str": "plot.axis",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.axis"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "artist"
          ],
          "code_str": "plot.artist",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.artist"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "artist"
          ],
          "code_str": "plot.artist",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.artist"
        },
        {
          "import_components": [
            "xplt",
            "TwissPlot",
            "()",
            "legend"
          ],
          "code_str": "plot.legend",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "xplt.twiss.TwissPlot.legend"
        }
      ],
      "example": {
        "document": "examples/twiss",
        "ref_id": "customisation",
        "headings": [
          "Twiss",
          "Customisation"
        ]
      },
      "doc_lineno": 210002
    }
  ],
  "examples/utilities": [
    {
      "source": "%load_ext autoreload\n%autoreload 2\n\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "examples/utilities",
        "ref_id": "utilities",
        "headings": [
          "Utilities"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport xplt\n\n# xplt.apply_style()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "xplt"
        }
      ],
      "example": {
        "document": "examples/utilities",
        "ref_id": "utilities",
        "headings": [
          "Utilities"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "fig, ax = plt.subplots(figsize=(4.5, 3))\nx = np.linspace(0, 10, 10000)\nax.plot(x, np.sin(2 * np.pi * x))\nax.minorticks_on()\nax.grid()\n\nax.set_xscale(\"discontinuous_linear\", breaks=[(2, 4), (6, 9)], space=0.5)\nax.set_yscale(\n    \"discontinuous_linear\",\n    breaks=[\n        (-0.25, 0.25),\n    ],\n    space=0.1,\n    hide=True,\n)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.pi"
        }
      ],
      "example": {
        "document": "examples/utilities",
        "ref_id": "discontinuous-axes",
        "headings": [
          "Utilities",
          "Discontinuous axes"
        ]
      },
      "doc_lineno": 60002
    }
  ],
  "index": [],
  "quickstart": [],
  "usage": [
    {
      "source": "import xplt\nxplt.apply_style()  # use our matplotlib style sheet\nimport numpy as np\nimport pandas as pd\n\n# Dictionary\nparticles = dict(\n    x = np.random.normal(size=int(1e5)),  # in m\n    px = np.random.normal(size=int(1e5)),  # in rad\n    a = np.random.normal(size=int(1e5)),  # custom attribute\n)\nxplt.PhaseSpacePlot(particles, kind='x-px', data_unit=dict(a=\"km\"))\n\n# Pandas DataFrame\ndf = pd.DataFrame(particles)\nxplt.PhaseSpacePlot(df, kind='x-px')\n\n...\n",
      "names": [
        {
          "import_components": [
            "xplt"
          ],
          "code_str": "xplt",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "xplt"
        },
        {
          "import_components": [
            "xplt",
            "apply_style"
          ],
          "code_str": "xplt.apply_style",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "xplt.apply_style"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        },
        {
          "import_components": [
            "xplt",
            "PhaseSpacePlot"
          ],
          "code_str": "xplt.PhaseSpacePlot",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "xplt.phasespace.PhaseSpacePlot"
        }
      ],
      "example": {
        "document": "usage",
        "ref_id": "user-guide",
        "headings": [
          "User guide"
        ]
      },
      "doc_lineno": 24
    }
  ]
}